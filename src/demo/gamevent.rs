use std::collections::HashMap;

use crate::{ParseError, Result};

#[derive(Debug)]
pub struct GameEventDefinition {
    id: u32,
    name: String,
    entries: Vec<GameEventEntry>,
}

#[derive(Debug)]
pub struct GameEventEntry {
    name: String,
    kind: GameEventValueType,
}

#[derive(Debug, Clone, Copy)]
pub enum GameEventValueType {
    String,
    Float,
    Long,
    Short,
    Byte,
    Boolean,
    Local,
}

#[derive(Debug)]
pub struct GameEvent {
    kind: GameEventType,
    values: HashMap<String, GameEventValue>,
}

#[derive(Debug, Clone)]
pub enum GameEventValue {
    String(String),
    Float(f32),
    Long(u32),
    Short(u16),
    Byte(u8),
    Boolean(bool),
    Local,
}

pub trait FromGameEventValue: Sized {
    fn from_value(value: GameEventValue, name: &str) -> Result<Self>;
}

impl FromGameEventValue for String {
    fn from_value(value: GameEventValue, name: &str) -> Result<Self> {
        match value {
            GameEventValue::String(val) => Ok(val),
            _ => Err(ParseError::InvalidGameEvent {
                name: name.to_string(),
                value,
            })
        }
    }
}

impl FromGameEventValue for f32 {
    fn from_value(value: GameEventValue, name: &str) -> Result<Self> {
        match value {
            GameEventValue::Float(val) => Ok(val),
            _ => Err(ParseError::InvalidGameEvent {
                name: name.to_string(),
                value,
            })
        }
    }
}

impl FromGameEventValue for u32 {
    fn from_value(value: GameEventValue, name: &str) -> Result<Self> {
        match value {
            GameEventValue::Long(val) => Ok(val),
            _ => Err(ParseError::InvalidGameEvent {
                name: name.to_string(),
                value,
            })
        }
    }
}

impl FromGameEventValue for u16 {
    fn from_value(value: GameEventValue, name: &str) -> Result<Self> {
        match value {
            GameEventValue::Short(val) => Ok(val),
            _ => Err(ParseError::InvalidGameEvent {
                name: name.to_string(),
                value,
            })
        }
    }
}

impl FromGameEventValue for u8 {
    fn from_value(value: GameEventValue, name: &str) -> Result<Self> {
        match value {
            GameEventValue::Byte(val) => Ok(val),
            _ => Err(ParseError::InvalidGameEvent {
                name: name.to_string(),
                value,
            })
        }
    }
}

impl FromGameEventValue for bool {
    fn from_value(value: GameEventValue, name: &str) -> Result<Self> {
        match value {
            GameEventValue::Boolean(val) => Ok(val),
            _ => Err(ParseError::InvalidGameEvent {
                name: name.to_string(),
                value,
            })
        }
    }
}

impl FromGameEventValue for () {
    fn from_value(value: GameEventValue, name: &str) -> Result<Self> {
        match value {
            GameEventValue::Local => Ok(()),
            _ => Err(ParseError::InvalidGameEvent {
                name: name.to_string(),
                value,
            })
        }
    }
}

#[derive(Debug, Clone, Copy)]
pub enum GameEventType {
    ServerSpawnEvent,
    ServerChangelevelFailedEvent,
    ServerShutdownEvent,
    ServerCvarEvent,
    ServerMessageEvent,
    ServerAddBanEvent,
    ServerRemoveBanEvent,
    PlayerConnectEvent,
    PlayerConnectClientEvent,
    PlayerInfoEvent,
    PlayerDisconnectEvent,
    PlayerActivateEvent,
    PlayerSayEvent,
    ClientDisconnectEvent,
    ClientBeginConnectEvent,
    ClientConnectedEvent,
    ClientFullConnectEvent,
    HostQuitEvent,
    TeamInfoEvent,
    TeamScoreEvent,
    TeamPlayBroadcastAudioEvent,
    PlayerTeamEvent,
    PlayerClassEvent,
    PlayerDeathEvent,
    PlayerHurtEvent,
    PlayerChatEvent,
    PlayerScoreEvent,
    PlayerSpawnEvent,
    PlayerShootEvent,
    PlayerUseEvent,
    PlayerChangeNameEvent,
    PlayerHintMessageEvent,
    BasePlayerTeleportedEvent,
    GameInitEvent,
    GameNewMapEvent,
    GameStartEvent,
    GameEndEvent,
    RoundStartEvent,
    RoundEndEvent,
    GameMessageEvent,
    BreakBreakableEvent,
    BreakPropEvent,
    EntityKilledEvent,
    BonusUpdatedEvent,
    AchievementEventEvent,
    AchievementIncrementEvent,
    PhysgunPickupEvent,
    FlareIgniteNpcEvent,
    HelicopterGrenadePuntMissEvent,
    UserDataDownloadedEvent,
    RagdollDissolvedEvent,
    HLTVChangedModeEvent,
    HLTVChangedTargetEvent,
    VoteEndedEvent,
    VoteStartedEvent,
    VoteChangedEvent,
    VotePassedEvent,
    VoteFailedEvent,
    VoteCastEvent,
    VoteOptionsEvent,
    ReplaySavedEvent,
    EnteredPerformanceModeEvent,
    BrowseReplaysEvent,
    ReplayYoutubeStatsEvent,
    InventoryUpdatedEvent,
    CartUpdatedEvent,
    StorePricesheetUpdatedEvent,
    GcConnectedEvent,
    ItemSchemaInitializedEvent,
    IntroFinishEvent,
    IntroNextCameraEvent,
    MmLobbyChatEvent,
    MmLobbyMemberJoinEvent,
    MmLobbyMemberLeaveEvent,
    PlayerChangeClassEvent,
    TfMapTimeRemainingEvent,
    TfGameOverEvent,
    CtfFlagCapturedEvent,
    ControlPointInitializedEvent,
    ControlPointUpdateImagesEvent,
    ControlPointUpdateLayoutEvent,
    ControlPointUpdateCappingEvent,
    ControlPointUpdateOwnerEvent,
    ControlPointStartTouchEvent,
    ControlPointEndTouchEvent,
    ControlPointPulseElementEvent,
    ControlPointFakeCaptureEvent,
    ControlPointFakeCaptureMultEvent,
    TeamPlayRoundSelectedEvent,
    TeamPlayRoundStartEvent,
    TeamPlayRoundActiveEvent,
    TeamPlayWaitingBeginsEvent,
    TeamPlayWaitingEndsEvent,
    TeamPlayWaitingAboutToEndEvent,
    TeamPlayRestartRoundEvent,
    TeamPlayReadyRestartEvent,
    TeamPlayRoundRestartSecondsEvent,
    TeamPlayTeamReadyEvent,
    TeamPlayRoundWinEvent,
    TeamPlayUpdateTimerEvent,
    TeamPlayRoundStalemateEvent,
    TeamPlayOvertimeBeginEvent,
    TeamPlayOvertimeEndEvent,
    TeamPlaySuddenDeathBeginEvent,
    TeamPlaySuddenDeathEndEvent,
    TeamPlayGameOverEvent,
    TeamPlayMapTimeRemainingEvent,
    TeamPlayTimerFlashEvent,
    TeamPlayTimerTimeAddedEvent,
    TeamPlayPointStartCaptureEvent,
    TeamPlayPointCapturedEvent,
    TeamPlayPointLockedEvent,
    TeamPlayPointUnlockedEvent,
    TeamPlayCaptureBrokenEvent,
    TeamPlayCaptureBlockedEvent,
    TeamPlayFlagEventEvent,
    TeamPlayWinPanelEvent,
    TeamPlayTeambalancedPlayerEvent,
    TeamPlaySetupFinishedEvent,
    TeamPlayAlertEvent,
    TrainingCompleteEvent,
    ShowFreezePanelEvent,
    HideFreezePanelEvent,
    FreezeCamStartedEvent,
    LocalPlayerChangeTeamEvent,
    LocalPlayerScoreChangedEvent,
    LocalPlayerChangeClassEvent,
    LocalPlayerRespawnEvent,
    BuildingInfoChangedEvent,
    LocalPlayerChangeDisguiseEvent,
    PlayerAccountChangedEvent,
    SpyPdaResetEvent,
    FlagStatusUpdateEvent,
    PlayerStatsUpdatedEvent,
    PlayingCommentaryEvent,
    PlayerChargedeployedEvent,
    PlayerBuiltObjectEvent,
    PlayerUpgradedObjectEvent,
    PlayerCarryObjectEvent,
    PlayerDropObjectEvent,
    ObjectRemovedEvent,
    ObjectDestroyedEvent,
    ObjectDetonatedEvent,
    AchievementEarnedEvent,
    SpecTargetUpdatedEvent,
    TournamentStateUpdateEvent,
    TournamentEnableCountdownEvent,
    PlayerCalledForMedicEvent,
    PlayerAskedForBallEvent,
    LocalPlayerBecameObserverEvent,
    PlayerIgnitedInvEvent,
    PlayerIgnitedEvent,
    PlayerExtinguishedEvent,
    PlayerTeleportedEvent,
    PlayerHealedMedicCallEvent,
    LocalPlayerChargeReadyEvent,
    LocalPlayerWinddownEvent,
    PlayerInvulnedEvent,
    EscortSpeedEvent,
    EscortProgressEvent,
    EscortRecedeEvent,
    GameUIActivatedEvent,
    GameUIHiddenEvent,
    PlayerEscortScoreEvent,
    PlayerHealOnHitEvent,
    PlayerStealsandvichEvent,
    ShowClassLayoutEvent,
    ShowVsPanelEvent,
    PlayerDamagedEvent,
    ArenaPlayerNotificationEvent,
    ArenaMatchMaxStreakEvent,
    ArenaRoundStartEvent,
    ArenaWinPanelEvent,
    PveWinPanelEvent,
    AirDashEvent,
    LandedEvent,
    PlayerDamageDodgedEvent,
    PlayerStunnedEvent,
    ScoutGrandSlamEvent,
    ScoutSlamdollLandedEvent,
    ArrowImpactEvent,
    PlayerJaratedEvent,
    PlayerJaratedFadeEvent,
    PlayerShieldBlockedEvent,
    PlayerPinnedEvent,
    PlayerHealedByMedicEvent,
    PlayerSappedObjectEvent,
    ItemFoundEvent,
    ShowAnnotationEvent,
    HideAnnotationEvent,
    PostInventoryApplicationEvent,
    ControlPointUnlockUpdatedEvent,
    DeployBuffBannerEvent,
    PlayerBuffEvent,
    MedicDeathEvent,
    OvertimeNagEvent,
    TeamsChangedEvent,
    HalloweenPumpkinGrabEvent,
    RocketJumpEvent,
    RocketJumpLandedEvent,
    StickyJumpEvent,
    StickyJumpLandedEvent,
    MedicDefendedEvent,
    LocalPlayerHealedEvent,
    PlayerDestroyedPipeBombEvent,
    ObjectDeflectedEvent,
    PlayerMvpEvent,
    RaidSpawnMobEvent,
    RaidSpawnSquadEvent,
    NavBlockedEvent,
    PathTrackPassedEvent,
    NumCappersChangedEvent,
    PlayerRegenerateEvent,
    UpdateStatusItemEvent,
    StatsResetRoundEvent,
    ScoreStatsAccumulatedUpdateEvent,
    ScoreStatsAccumulatedResetEvent,
    AchievementEarnedLocalEvent,
    PlayerHealedEvent,
    BuildingHealedEvent,
    ItemPickupEvent,
    DuelStatusEvent,
    FishNoticeEvent,
    FishNoticeArmEvent,
    ThrowableHitEvent,
    PumpkinLordSummonedEvent,
    PumpkinLordKilledEvent,
    MerasmusSummonedEvent,
    MerasmusKilledEvent,
    MerasmusEscapeWarningEvent,
    MerasmusEscapedEvent,
    EyeballBossSummonedEvent,
    EyeballBossStunnedEvent,
    EyeballBossKilledEvent,
    EyeballBossKillerEvent,
    EyeballBossEscapeImminentEvent,
    EyeballBossEscapedEvent,
    NpcHurtEvent,
    ControlPointTimerUpdatedEvent,
    PlayerHighfiveStartEvent,
    PlayerHighfiveCancelEvent,
    PlayerHighfiveSuccessEvent,
    PlayerBonusPointsEvent,
    PlayerUpgradedEvent,
    PlayerBuybackEvent,
    PlayerUsedPowerUpBottleEvent,
    ChristmasGiftGrabEvent,
    PlayerKilledAchievementZoneEvent,
    PartyUpdatedEvent,
    LobbyUpdatedEvent,
    MvmMissionUpdateEvent,
    RecalculateHolidaysEvent,
    PlayerCurrencyChangedEvent,
    DoomsdayRocketOpenEvent,
    RemoveNemesisRelationshipsEvent,
    MvmCreditBonusWaveEvent,
    MvmCreditBonusAllEvent,
    MvmCreditBonusAllAdvancedEvent,
    MvmQuickSentryUpgradeEvent,
    MvmTankDestroyedByPlayersEvent,
    MvmKillRobotDeliveringBombEvent,
    MvmPickupCurrencyEvent,
    MvmBombCarrierKilledEvent,
    MvmSentryBusterDetonateEvent,
    MvmScoutMarkedForDeathEvent,
    MvmMedicPowerupSharedEvent,
    MvmBeginWaveEvent,
    MvmWaveCompleteEvent,
    MvmMissionCompleteEvent,
    MvmBombResetByPlayerEvent,
    MvmBombAlarmTriggeredEvent,
    MvmBombDeployResetByPlayerEvent,
    MvmWaveFailedEvent,
    MvmResetStatsEvent,
    DamageResistedEvent,
    RevivePlayerNotifyEvent,
    RevivePlayerStoppedEvent,
    RevivePlayerCompleteEvent,
    PlayerTurnedToGhostEvent,
    MedigunShieldBlockedDamageEvent,
    MvmAdvWaveCompleteNoGatesEvent,
    MvmSniperHeadshotCurrencyEvent,
    MvmMannhattanPitEvent,
    FlagCarriedInDetectionZoneEvent,
    MvmAdvWaveKilledStunRadioEvent,
    PlayerDirecthitStunEvent,
    MvmSentryBusterKilledEvent,
    UpgradesFileChangedEvent,
    RdTeamPointsChangedEvent,
    RdRulesStateChangedEvent,
    RdRobotKilledEvent,
    RdRobotImpactEvent,
    TeamPlayPreRoundTimeLeftEvent,
    ParachuteDeployEvent,
    ParachuteHolsterEvent,
    KillRefillsMeterEvent,
    RpsTauntEventEvent,
    CongaKillEvent,
    PlayerInitialSpawnEvent,
    CompetitiveVictoryEvent,
    CompetitiveStatsUpdateEvent,
    MiniGameWinEvent,
    SentryOnGoActiveEvent,
    DuckXpLevelUpEvent,
    QuestLogOpenedEvent,
    SchemaUpdatedEvent,
    LocalPlayerPickupWeaponEvent,
    RdPlayerScorePointsEvent,
    DemomanDetStickiesEvent,
    QuestObjectiveCompletedEvent,
    PlayerScoreChangedEvent,
    KilledCappingPlayerEvent,
    EnvironmentalDeathEvent,
    ProjectileDirectHitEvent,
    PassGetEvent,
    PassScoreEvent,
    PassFreeEvent,
    PassPassCaughtEvent,
    PassBallStolenEvent,
    PassBallBlockedEvent,
    DamagePreventedEvent,
    HalloweenBossKilledEvent,
    EscapedLootIslandEvent,
    TaggedPlayerAsItEvent,
    MerasmusStunnedEvent,
    MerasmusPropFoundEvent,
    HalloweenSkeletonKilledEvent,
    EscapeHellEvent,
    CrossSpectralBridgeEvent,
    MiniGameWonEvent,
    RespawnGhostEvent,
    KillInHellEvent,
    HalloweenDuckCollectedEvent,
    SpecialScoreEvent,
    TeamLeaderKilledEvent,
    HalloweenSoulCollectedEvent,
    RecalculateTruceEvent,
    DeadringerCheatDeathEvent,
    CrossbowHealEvent,
    DamageMitigatedEvent,
    PayloadPushedEvent,
    PlayerAbandonedMatchEvent,
    ClDrawlineEvent,
    RestartTimerTimeEvent,
    WinLimitChangedEvent,
    WinPanelShowScoresEvent,
    TopStreamsRequestFinishedEvent,
    CompetitiveStateChangedEvent,
    GlobalWarDataUpdatedEvent,
    StopWatchChangedEvent,
    DsStopEvent,
    DsScreenshotEvent,
    ShowMatchSummaryEvent,
    ExperienceChangedEvent,
    BeginXpLerpEvent,
    MatchmakerStatsUpdatedEvent,
    RematchVotePeriodOverEvent,
    RematchFailedToCreateEvent,
    PlayerRematchChangeEvent,
    PingUpdatedEvent,
    PlayerNextMapVoteChangeEvent,
    VoteMapsChangedEvent,
    HLTVStatusEvent,
    HLTVCameramanEvent,
    HLTVRankCameraEvent,
    HLTVRankEntityEvent,
    HLTVFixedEvent,
    HLTVChaseEvent,
    HLTVMessageEvent,
    HLTVTitleEvent,
    HLTVChatEvent,
    ReplayStartRecordEvent,
    ReplaySessionInfoEvent,
    ReplayEndRecordEvent,
    ReplayReplaysAvailableEvent,
    ReplayServerErrorEvent,
}

pub struct RawGameEvent {
    pub name: String,
    pub values: HashMap<String, GameEventValue>,
}

pub trait FromRawGameEvent: Sized {
    fn from_raw_event(values: HashMap<String, GameEventValue>) -> Result<Self>;
}